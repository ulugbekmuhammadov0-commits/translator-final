import os
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command 
from deep_translator import GoogleTranslator 
import google.generativeai as genai
from google.api_core.exceptions import GoogleAPIError 

# ==================================
# 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ 
# ==================================

# –ß—Ç–µ–Ω–∏–µ –∫–ª—é—á–µ–π –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è Render
BOT_TOKEN = os.getenv("BOT_TOKEN") 
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

if not BOT_TOKEN or not GEMINI_API_KEY:
    print("‚ùå –ö–ª—é—á–∏ BOT_TOKEN –∏–ª–∏ GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Render.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–æ–≤ –∏ –∫–ª–∏–µ–Ω—Ç–æ–≤
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è deep-translator
translator = GoogleTranslator(source='auto', target='en')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–æ–≤
languages = {
    "–†—É—Å—Å–∫–∏–π üá∑üá∫": "ru",
    "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π üá¨üáß": "en",
    "–£–∑–±–µ–∫—Å–∫–∏–π üá∫üáø": "uz"
}

user_lang = {}

# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò 
SAFETY_SETTINGS = [
    {"category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_NONE"},
    {"category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_NONE"},
    {"category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_NONE"},
    {"category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_NONE"},
]

# –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Gemini API
try:
    genai.configure(api_key=GEMINI_API_KEY)
    print("‚úÖ Gemini API –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
    try:
        models = genai.list_models()
        available_models = [model.name for model in models if 'generateContent' in model.supported_generation_methods]
        print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è generateContent: {available_models}")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π: {e}")
        
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Gemini: {e}")


# ==================================
# 2. –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ Gemini
# ==================================

async def get_gemini_response(prompt: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ Gemini –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–ª–∏ –æ—à–∏–±–∫—É."""
    try:
        # –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–û –†–ê–ë–û–¢–ê–Æ–©–ê–Ø –ú–û–î–ï–õ–¨
        model = genai.GenerativeModel('gemini-pro')
        print(f"üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å: gemini-pro")
        
        response = model.generate_content(
            prompt,
            generation_config=genai.types.GenerationConfig(
                temperature=0.4,
                max_output_tokens=400
            ),
            safety_settings=SAFETY_SETTINGS
        )
        
        if response and response.text:
            return response.text.strip()
        
        return "‚ö†Ô∏è Gemini –Ω–µ —Å–º–æ–≥ –¥–∞—Ç—å –æ—Ç–≤–µ—Ç."
        
    except GoogleAPIError as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ò–ò (API Gemini): {e}"
    except Exception as e:
        return f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ò–ò: {e}"


# ==================================
# 3. –•–µ–Ω–¥–ª–µ—Ä—ã (–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π)
# ==================================

@dp.message(Command('start'))
async def start(message: types.Message):
    button_list = [types.KeyboardButton(text=lang_name) for lang_name in languages.keys()]
    
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[button_list], 
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —É–º–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –∏ –ø–æ–º–æ—â–Ω–∏–∫.\n"
        "–í—ã–±–µ—Ä–∏ —è–∑—ã–∫, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —è –±—É–¥—É –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å:",
        reply_markup=keyboard
    )

@dp.message(F.text.in_(languages.keys()))
async def set_language(message: types.Message):
    user_lang[message.from_user.id] = languages[message.text]
    await message.answer(f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ü–µ—Ä–µ–≤–æ–∂—É –Ω–∞ {message.text}.\n–¢–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Ñ—Ä–∞–∑—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è.",
                         reply_markup=types.ReplyKeyboardRemove())

@dp.message(F.text)
async def handle_text(message: types.Message):
    target_lang_code = user_lang.get(message.from_user.id, "en")
    source_text = message.text

    # --- –®–∞–≥ 1: –ü–µ—Ä–µ–≤–æ–¥ —Å –ø–æ–º–æ—â—å—é deep-translator ---
    translation = ""
    try:
        translator.target = target_lang_code 
        translation = await asyncio.to_thread(translator.translate, source_text)
        if not translation:
             translation = source_text
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        return

    # --- –®–∞–≥ 2: –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é Gemini ---
    gemini_output_lang = "en"
    ai_text = ""
    ai_text_en = ""
    
    # 1. –ó–∞–ø—Ä–æ—Å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
    prompt_en = (
        f"–û–±—ä—è—Å–Ω–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –¥–∞–π –∫—Ä–∞—Ç–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ñ—Ä–∞–∑—ã: '{translation}'. "
        f"–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ –ê–ù–ì–õ–ò–ô–°–ö–û–ú —è–∑—ã–∫–µ –∏ –±—ã—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ—Ä–æ—Ç–∫–∏–º –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É."
    )
    ai_text_en = await get_gemini_response(prompt_en)
    
    # 2. –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞ Gemini –Ω–∞ —Ü–µ–ª–µ–≤–æ–π —è–∑—ã–∫
    if ai_text_en and not ai_text_en.startswith("‚ö†Ô∏è"):
        if target_lang_code != gemini_output_lang:
            try:
                translator.source = gemini_output_lang
                translator.target = target_lang_code
                ai_text = await asyncio.to_thread(translator.translate, ai_text_en)
            except Exception as e:
                ai_text = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è: {e}"
        else:
            ai_text = ai_text_en
    else:
        ai_text = ai_text_en

    # --- –®–∞–≥ 3: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–°–∏–Ω–æ–Ω–∏–º—ã" ---
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¢–û–õ–¨–ö–û –ü–ï–†–í–û–ï –°–õ–û–í–û –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è callback_data
    first_word = translation.split()[0][:20] if translation else "word"
    synonym_callback_data = f"SYNONYM_{target_lang_code}_{first_word}"
    
    inline_keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(text="üîé –°–∏–Ω–æ–Ω–∏–º—ã", callback_data=synonym_callback_data)
            ]
        ]
    )

    await message.answer(
        f"üåç <b>–ü–µ—Ä–µ–≤–æ–¥:</b>\n{translation}\n\nü§ñ <b>–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –æ—Ç Gemini:</b>\n{ai_text}",
        parse_mode="HTML",
        reply_markup=inline_keyboard
    )


# ==================================
# 4. –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–°–∏–Ω–æ–Ω–∏–º—ã"
# ==================================

@dp.callback_query(F.data.startswith("SYNONYM_"))
async def handle_synonym_request(callback_query: types.CallbackQuery):
    # –†–∞–∑–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ: SYNONYM_[lang_code]_[word]
    _, lang_code, word = callback_query.data.split('_')
    
    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É
    await bot.edit_message_reply_markup(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        reply_markup=None
    )

    await callback_query.answer("–ò—â–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã...")

    synonyms_text = ""
    
    # --- –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –∑–∞–ø—Ä–æ—Å–∞ ---

    if lang_code == "uz":
        # –£–∑–±–µ–∫—Å–∫–∏–π (uz): –î–≤–æ–π–Ω–æ–π –ø–µ—Ä–µ–≤–æ–¥ (–ê–Ω–≥–ª -> –£–∑–±–µ–∫) –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        prompt_synonym_en = (
            f"Provide 5-7 synonyms for the word '{word}' and list them. The response must be a simple, clean, unnumbered list in ENGLISH."
        )
        synonyms_en = await get_gemini_response(prompt_synonym_en)

        if synonyms_en.startswith("‚ö†Ô∏è"):
            synonyms_text = synonyms_en
        elif not synonyms_en or len(synonyms_en) < 5:
            synonyms_text = f"‚ö†Ô∏è Gemini –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Å–∏–Ω–æ–Ω–∏–º—ã –∏–ª–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –¥–ª—è —Å–ª–æ–≤–∞ \"{word}\"."
        else:
            try:
                # –ü–µ—Ä–µ–≤–æ–¥ —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –Ω–∞ —É–∑–±–µ–∫—Å–∫–∏–π
                translator.source = "en"
                translator.target = lang_code
                synonyms_text = await asyncio.to_thread(translator.translate, synonyms_en)
            except Exception:
                synonyms_text = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ —Å–ø–∏—Å–∫–∞ —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –Ω–∞ {lang_code}. –í–æ—Ç –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –æ—Ä–∏–≥–∏–Ω–∞–ª:\n{synonyms_en}"
            
    else:
        # –†—É—Å—Å–∫–∏–π (ru) –∏ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π (en): –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ü–µ–ª–µ–≤–æ–º —è–∑—ã–∫–µ
        
        prompt_synonym_direct = (
            f"Provide 5-7 synonyms or alternative phrases for the word '{word}' in the language with code '{lang_code}' and list them in a simple, unnumbered format."
            f"Do not add extra explanations, only the list."
        )
        synonyms_text = await get_gemini_response(prompt_synonym_direct)
        
        if synonyms_text.startswith("‚ö†Ô∏è"):
             pass # –û—à–∏–±–∫–∞ —É–∂–µ –≤ —Ç–µ–∫—Å—Ç–µ
        elif not synonyms_text or len(synonyms_text) < 5:
             synonyms_text = f"‚ö†Ô∏è Gemini –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Å–∏–Ω–æ–Ω–∏–º—ã –∏–ª–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –¥–ª—è —Å–ª–æ–≤–∞ \"{word}\"."

    # --- –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ---
    await bot.send_message(
        callback_query.message.chat.id,
        f"üìö <b>–°–∏–Ω–æ–Ω–∏–º—ã/–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –¥–ª—è \"{word}\":</b>\n\n{synonyms_text}",
        parse_mode="HTML"
    )

    await callback_query.answer()


# ==================================
# 5. –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ (aiogram 3.x)
# ==================================
async def main():
    print("üîÑ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤–µ–±—Ö—É–∫–∞
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        print("‚úÖ –í–µ–±—Ö—É–∫ –æ—á–∏—â–µ–Ω")
        await asyncio.sleep(2)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
    
    if BOT_TOKEN and GEMINI_API_KEY:
        print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
        await dp.start_polling(bot, skip_updates=True)
    else:
        print("‚ùå –ö–ª—é—á–∏ API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –ë–æ—Ç –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω.")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é")
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
